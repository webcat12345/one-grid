{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular2-grid/helpers/NgGridHelpers.ts","ng://angular2-grid/components/NgGridPlaceholder.ts","ng://angular2-grid/directives/NgGrid.ts","ng://angular2-grid/directives/NgGridItem.ts","ng://angular2-grid/modules/NgGrid.module.ts"],"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","sortItemsByPositionHorizontal","a","b","col","row","sortItemsByPositionVertical","NgGridPlaceholder","_ngEl","_renderer","this","prototype","registerGrid","ngGrid","_ngGrid","ngOnInit","addClass","nativeElement","autoStyle","setStyle","setSize","newSize","_size","_recalculateDimensions","setGridPosition","newPosition","_position","_recalculatePosition","setCascadeMode","cascade","_cascadeMode","_setDimensions","w","h","_setPosition","x","y","colWidth","marginLeft","marginRight","screenMargin","rowHeight","marginTop","marginBottom","Component","args","selector","template","ElementRef","Renderer2","NgGrid","_differs","componentFactoryResolver","onDragStart","EventEmitter","onDrag","onDragStop","onResizeStart","onResize","onResizeStop","onItemChange","minCols","minRows","isDragging","isResizing","resizeEnable","dragEnable","minWidth","minHeight","resizeDirections","CONST_DEFAULT_RESIZE_DIRECTIONS","_items","Map","_draggingItem","_resizingItem","_resizeDirection","_itemsInGrid","Set","_maxCols","_maxRows","_visibleCols","_visibleRows","_setWidth","_setHeight","_posOffset","_adding","_placeholderRef","_fixToGrid","_autoResize","_destroyed","_maintainRatio","_preferNew","_zoomOnDrag","_limitToScreen","_centerToScreen","_curMaxRow","_curMaxCol","_dragReady","_resizeReady","_elementBasedDynamicRowHeight","_itemFixDirection","_collisionFixDirection","_allowOverlap","_lastZValue","_subscriptions","_enabledListener","_config","CONST_DEFAULT_CONFIG","_defineListeners","Object","defineProperty","v","setConfig","_differ","find","create","diff","ngOnDestroy","_disableListeners","generateItemUid","uid","replace","c","r","Math","random","toString","has","config","_this","maxColRowChanged","val","intVal","parseInt","setMargins","max","_cascadeGrid","console","warn","_enableListeners","_getFixDirectionFromCascade","newMaxCols","_getContainerColumns","_getScreenMargin","_aspectRatio","_updatePositionsAfterMaxChange","_calculateColWidth","_calculateRowHeight","maxWidth","maxHeight","ceil","_updateRatio","forEach","item","_removeFromGrid","recalculateSelf","_addToGrid","_updateSize","getItemPosition","itemId","get","getGridPosition","getItemSize","getSize","ngDoCheck","changes","_applyChanges","margins","enableDrag","disableDrag","enableResize","disableResize","addItem","ngItem","newPos","_fixGridPosition","set","triggerCascade","then","onCascadeEvent","_emitOnItemChange","removeItem","delete","updateItem","_cascadePromise","Promise","resolve","setTimeout","triggerResize","resizeEventHandler","e","newMaxColumns","mouseDownEventHandler","mousePos","_getMousePosition","_getItemFromPosition","resizeDirection","canResize","preventDefault","canDrag","itemPos","getPosition","left","top","mouseUpEventHandler","_dragStop","_resizeStop","_cleanDrag","_cleanResize","mouseMoveEventHandler","_resizeStart","_dragStart","_drag","_resize","onMouseMove","pos","dims","_hasGridCollision","_isWithinBounds","maxCols","getBoundingClientRect","width","floor","min_cols","maxRows","height","window","innerHeight","min_rows","forEachAddedItem","record","key","currentValue","forEachChangedItem","forEachRemovedItem","startMoving","_createPlaceholder","zIndex","emit","onResizeStartEvent","onDragStartEvent","_zoomOut","_resetZoom","getSelection","empty","removeAllRanges","selection","newL","newT","gridPos","_calculateGridPosition","_fixPosToBoundsX","_isWithinBoundsY","_fixPosToBoundsY","instance","indexOf","_fixGridCollisions","setPosition","onDragEvent","itemDims","getDimensions","endCorner","resizeTop","includes","resizeBottom","resizeLeft","newW","newH","newX","newY","calcSize","_calculateGridSize","itemSize","iGridPos","bottomRightCorner","targetPos","assign","_isWithinBoundsX","_fixSizeToBoundsX","_fixSizeToBoundsY","fixResize","setDimensions","onResizeEvent","stopMoving","onDragStopEvent","destroy","onResizeStopEvent","sizex","round","sizey","_getCollisions","returns","leftCol","rightCol","topRow","bottomRow","itemLeftCol","itemRightCol","itemTopRow","itemBottomRow","push","collisions","collisions_1","collisions_1_1","collision","newItemPos","Error","itemsInGrid","Array","from","sort","NgGridHelper.sortItemsByPositionVertical","lowestRowPerColumn","itemsInGrid_1","itemsInGrid_1_1","isFixed","lowestRowForItem","lowestRowForColumn","NgGridHelper.sortItemsByPositionHorizontal","lowestColumnPerRow","itemsInGrid_2","itemsInGrid_2_1","lowestColumnForItem","lowestOffsetColumn","maxRow","_getMaxRow","maxCol","_getMaxCol","fixLoop","itemsInPath","_getItemsInVerticalPath","nextRow","itemsInPath_1","e_4","itemsInPath_1_1","min","apply","map","_getItemsInHorizontalPath","nextCol","itemsInPath_2","e_5","itemsInPath_2_1","startColumn","startRow","allowExcessiveItems","_fixPosToBounds","_fixSizeToBounds","add","itemsRows","itemsCols","TouchEvent","touches","changedTouches","refPos","clientX","clientY","_getAbsoluteMousePosition","itemWidth","_getContainerRows","position","size","target","closest","containerRef","element","factory","resolveComponentFactory","componentRef","createComponent","placeholder","itemOutput","filter","getEventOutput","_documentMousemove$","fromEvent","document","_documentMouseup$","_mousedown$","_mousemove$","_mouseup$","_touchstart$","_touchmove$","_touchend$","_enableMouseListeners","_isTouchDevice","_enableTouchListeners","subs","unsubscribe","navigator","maxTouchPoints","touchstartSubs","subscribe","touchmoveSubs","touchendSubs","documentMousemoveSubs","documentMouseupSubs","mousedownSubs","mousemoveSubs","mouseupSubs","draggable","resizable","max_cols","max_rows","visible_cols","visible_rows","col_width","row_height","min_width","min_height","fix_to_grid","auto_style","auto_resize","maintain_ratio","prefer_new","zoom_on_drag","limit_to_screen","center_to_screen","resize_directions","element_based_row_height","fix_item_position_direction","fix_collision_position_direction","allow_overlap","Directive","inputs","host","(window:resize)","KeyValueDiffers","ComponentFactoryResolver","Output","NgGridItem","onDragAny","onResizeAny","onChangeStart","onChange","onChangeStop","onChangeAny","ngGridItemChange","isDraggable","isResizable","_currentPosition","_userConfig","_added","_minCols","_minRows","_resizeDirections","_zIndex","configObject","event","onConfigChangeEvent","_dragHandle","findHandle","handleSelector","startElement","targetElem","elementMatches","parentElement","err","_resizeHandle","resizeDirections_1","resizeDirections_1_1","direction","_borderSize","_c","_d","canResizeInDirection","cursor","getElement","getDragHandle","getResizeHandle","_elemWidth","_elemHeight","_elemLeft","_elemTop","_payload","payload","dragHandle","resizeHandle","borderSize","fixed","isNaN","isFinite","update","gridPosition","style","getComputedStyle","getPropertyValue","removeClass","matches","oMatchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","ownerDocument","querySelectorAll","newWidth","newHeight","originalEvent","oe","changed","changeCheck","ViewContainerRef","NgGridModule","NgModule","declarations","entryComponents","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { NgGridItem } from \"../directives/NgGridItem\";\n\nexport function generateUuid(): string {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tlet r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function sortItemsByPositionHorizontal(a: NgGridItem, b: NgGridItem): number {\n\tif (a.col === b.col) { return a.row - b.row; }\n\treturn a.col - b.col;\n}\n\nexport function sortItemsByPositionVertical(a: NgGridItem, b: NgGridItem): number {\n\tif (a.row === b.row) { return a.col - b.col; }\n\treturn a.row - b.row;\n}\n","import { NgGrid } from '../directives/NgGrid';\nimport { NgGridItemPosition, NgGridItemSize } from '../interfaces/INgGrid';\nimport { Component, Directive, ElementRef, Renderer2, EventEmitter, Host, ViewEncapsulation, Type, ComponentRef, KeyValueDiffer, KeyValueDiffers, OnInit, OnDestroy, DoCheck, ViewContainerRef, Output } from '@angular/core';\n\n@Component({\n    selector: 'ng-grid-placeholder',\n    template: ''\n})\nexport class NgGridPlaceholder implements OnInit {\n    private _size: NgGridItemSize;\n    private _position: NgGridItemPosition;\n    private _ngGrid: NgGrid;\n    private _cascadeMode: string;\n\n    constructor(private _ngEl: ElementRef, private _renderer: Renderer2) { }\n\n    public registerGrid(ngGrid: NgGrid) {\n        this._ngGrid = ngGrid;\n    }\n\n    public ngOnInit(): void {\n        this._renderer.addClass(this._ngEl.nativeElement, 'grid-placeholder');\n        if (this._ngGrid.autoStyle) this._renderer.setStyle(this._ngEl.nativeElement, 'position', 'absolute');\n    }\n\n    public setSize(newSize: NgGridItemSize): void {\n        this._size = newSize;\n        this._recalculateDimensions();\n    }\n\n    public setGridPosition(newPosition: NgGridItemPosition): void {\n        this._position = newPosition;\n        this._recalculatePosition();\n    }\n\n    public setCascadeMode(cascade: string): void {\n        this._cascadeMode = cascade;\n        switch (cascade) {\n            case 'up':\n            case 'left':\n            default:\n                this._renderer.setStyle(this._ngEl.nativeElement, 'left', '0px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'top', '0px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'right', null);\n                this._renderer.setStyle(this._ngEl.nativeElement, 'bottom', null);\n                break;\n            case 'right':\n                this._renderer.setStyle(this._ngEl.nativeElement, 'right', '0px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'top', '0px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'left', null);\n                this._renderer.setStyle(this._ngEl.nativeElement, 'bottom', null);\n                break;\n            case 'down':\n                this._renderer.setStyle(this._ngEl.nativeElement, 'left', '0px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'bottom', '0px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'right', null);\n                this._renderer.setStyle(this._ngEl.nativeElement, 'top', null);\n                break;\n        }\n    }\n\n    // Private methods\n    private _setDimensions(w: number, h: number): void {\n        this._renderer.setStyle(this._ngEl.nativeElement, 'width', w + 'px');\n        this._renderer.setStyle(this._ngEl.nativeElement, 'height', h + 'px');\n    }\n\n    private _setPosition(x: number, y: number): void {\n        switch (this._cascadeMode) {\n            case 'up':\n            case 'left':\n            default:\n                this._renderer.setStyle(this._ngEl.nativeElement, 'transform', 'translate(' + x + 'px, ' + y + 'px)');\n                break;\n            case 'right':\n                this._renderer.setStyle(this._ngEl.nativeElement, 'transform', 'translate(' + -x + 'px, ' + y + 'px)');\n                break;\n            case 'down':\n                this._renderer.setStyle(this._ngEl.nativeElement, 'transform', 'translate(' + x + 'px, ' + -y + 'px)');\n                break;\n        }\n    }\n\n    private _recalculatePosition(): void {\n        const x: number = (this._ngGrid.colWidth + this._ngGrid.marginLeft + this._ngGrid.marginRight) * (this._position.col - 1) + this._ngGrid.marginLeft + this._ngGrid.screenMargin;\n        const y: number = (this._ngGrid.rowHeight + this._ngGrid.marginTop + this._ngGrid.marginBottom) * (this._position.row - 1) + this._ngGrid.marginTop;\n        this._setPosition(x, y);\n    }\n\n    private _recalculateDimensions(): void {\n        const w: number = (this._ngGrid.colWidth * this._size.x) + ((this._ngGrid.marginLeft + this._ngGrid.marginRight) * (this._size.x - 1));\n        const h: number = (this._ngGrid.rowHeight * this._size.y) + ((this._ngGrid.marginTop + this._ngGrid.marginBottom) * (this._size.y - 1));\n        this._setDimensions(w, h);\n    }\n}\n","import { Component, Directive, ElementRef, Renderer2, EventEmitter, ComponentFactoryResolver, Host, ViewEncapsulation, Type, ComponentRef, KeyValueDiffer, KeyValueDiffers, OnInit, OnDestroy, DoCheck, ViewContainerRef, Output } from '@angular/core';\nimport { NgGridConfig, NgGridItemEvent, NgGridItemPosition, NgGridItemSize, NgGridRawPosition, NgGridItemDimensions, NgConfigFixDirection } from '../interfaces/INgGrid';\nimport { NgGridItem } from './NgGridItem';\nimport * as NgGridHelper from '../helpers/NgGridHelpers';\nimport { NgGridPlaceholder } from '../components/NgGridPlaceholder';\nimport { Subscription, Observable, fromEvent } from 'rxjs';\n\n@Directive({\n    selector: '[ngGrid]',\n    inputs: ['config: ngGrid'],\n    host: {\n        '(window:resize)': 'resizeEventHandler($event)',\n    }\n})\nexport class NgGrid implements OnInit, DoCheck, OnDestroy {\n    public static CONST_DEFAULT_RESIZE_DIRECTIONS: string[] = [\n        'bottomright',\n        'bottomleft',\n        'topright',\n        'topleft',\n        'right',\n        'left',\n        'bottom',\n        'top',\n    ];\n\n    // Event Emitters\n    @Output() public onDragStart: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\n    @Output() public onDrag: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\n    @Output() public onDragStop: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\n    @Output() public onResizeStart: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\n    @Output() public onResize: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\n    @Output() public onResizeStop: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\n    @Output() public onItemChange: EventEmitter<Array<NgGridItemEvent>> = new EventEmitter<Array<NgGridItemEvent>>();\n\n    // Public variables\n    public colWidth: number = 250;\n    public rowHeight: number = 250;\n    public minCols: number = 1;\n    public minRows: number = 1;\n    public marginTop: number = 10;\n    public marginRight: number = 10;\n    public marginBottom: number = 10;\n    public marginLeft: number = 10;\n    public screenMargin: number = 0;\n    public isDragging: boolean = false;\n    public isResizing: boolean = false;\n    public autoStyle: boolean = true;\n    public resizeEnable: boolean = true;\n    public dragEnable: boolean = true;\n    public cascade: string = 'up';\n    public minWidth: number = 100;\n    public minHeight: number = 100;\n    public resizeDirections: string[] = NgGrid.CONST_DEFAULT_RESIZE_DIRECTIONS;\n\n    // Private variables\n    private _items: Map<string, NgGridItem> = new Map<string, NgGridItem>();\n    private _draggingItem: NgGridItem = null;\n    private _resizingItem: NgGridItem = null;\n    private _resizeDirection: string = null;\n    private _itemsInGrid: Set<string> = new Set<string>();\n    private _containerWidth: number;\n    private _containerHeight: number;\n    private _maxCols: number = 0;\n    private _maxRows: number = 0;\n    private _visibleCols: number = 0;\n    private _visibleRows: number = 0;\n    private _setWidth: number = 250;\n    private _setHeight: number = 250;\n    private _posOffset: NgGridRawPosition = null;\n    private _adding: boolean = false;\n    private _placeholderRef: ComponentRef<NgGridPlaceholder> = null;\n    private _fixToGrid: boolean = false;\n    private _autoResize: boolean = false;\n    private _differ: KeyValueDiffer<string, any>;\n    private _destroyed: boolean = false;\n    private _maintainRatio: boolean = false;\n    private _aspectRatio: number;\n    private _preferNew: boolean = false;\n    private _zoomOnDrag: boolean = false;\n    private _limitToScreen: boolean = false;\n    private _centerToScreen: boolean = false;\n    private _curMaxRow: number = 0;\n    private _curMaxCol: number = 0;\n    private _dragReady: boolean = false;\n    private _resizeReady: boolean = false;\n    private _elementBasedDynamicRowHeight: boolean = false;\n    private _itemFixDirection: NgConfigFixDirection = 'cascade';\n    private _collisionFixDirection: NgConfigFixDirection = 'cascade';\n    private _allowOverlap: boolean = false;\n    private _cascadePromise: Promise<void>;\n    private _lastZValue: number = 1;\n\n    // Events\n    private _documentMousemove$: Observable<MouseEvent>;\n    private _documentMouseup$: Observable<MouseEvent>;\n    private _mousedown$: Observable<MouseEvent>;\n    private _mousemove$: Observable<MouseEvent>;\n    private _mouseup$: Observable<MouseEvent>;\n    private _touchstart$: Observable<TouchEvent>;\n    private _touchmove$: Observable<TouchEvent>;\n    private _touchend$: Observable<TouchEvent>;\n    private _subscriptions: Subscription[] = [];\n\n    private _enabledListener: boolean = false;\n\n    // Default config\n    private static CONST_DEFAULT_CONFIG: NgGridConfig = {\n        margins: [10],\n        draggable: true,\n        resizable: true,\n        max_cols: 0,\n        max_rows: 0,\n        visible_cols: 0,\n        visible_rows: 0,\n        col_width: 250,\n        row_height: 250,\n        cascade: 'up',\n        min_width: 100,\n        min_height: 100,\n        fix_to_grid: false,\n        auto_style: true,\n        auto_resize: false,\n        maintain_ratio: false,\n        prefer_new: false,\n        zoom_on_drag: false,\n        limit_to_screen: false,\n        center_to_screen: false,\n        resize_directions: NgGrid.CONST_DEFAULT_RESIZE_DIRECTIONS,\n        element_based_row_height: false,\n        fix_item_position_direction: 'cascade',\n        fix_collision_position_direction: 'cascade',\n        allow_overlap: false,\n    };\n    private _config = NgGrid.CONST_DEFAULT_CONFIG;\n\n    // [ng-grid] attribute handler\n    set config(v: NgGridConfig) {\n        if (v == null || typeof v !== 'object') {\n            return;\n        }\n\n        this.setConfig(v);\n\n        if (this._differ == null && v != null) {\n            this._differ = this._differs.find(this._config).create();\n        }\n\n        this._differ.diff(this._config);\n    }\n\n    // Constructor\n    constructor(\n        private _differs: KeyValueDiffers,\n        private _ngEl: ElementRef,\n        private _renderer: Renderer2,\n        private componentFactoryResolver: ComponentFactoryResolver,\n    ) {\n        this._defineListeners();\n    }\n\n    // Public methods\n    public ngOnInit(): void {\n        this._renderer.addClass(this._ngEl.nativeElement, 'grid');\n        if (this.autoStyle) this._renderer.setStyle(this._ngEl.nativeElement, 'position', 'relative');\n        this.setConfig(this._config);\n    }\n\n    public ngOnDestroy(): void {\n        this._destroyed = true;\n        this._disableListeners();\n    }\n\n    public generateItemUid(): string {\n        const uid: string = NgGridHelper.generateUuid();\n\n        if (this._items.has(uid)) {\n            return this.generateItemUid();\n        }\n\n        return uid;\n    }\n\n    public setConfig(config: NgGridConfig): void {\n        this._config = config;\n\n        var maxColRowChanged = false;\n        for (var x in config) {\n            var val = config[x];\n            var intVal = !val ? 0 : parseInt(val);\n\n            switch (x) {\n                case 'margins':\n                    this.setMargins(val);\n                    break;\n                case 'col_width':\n                    this.colWidth = Math.max(intVal, 1);\n                    break;\n                case 'row_height':\n                    this.rowHeight = Math.max(intVal, 1);\n                    break;\n                case 'auto_style':\n                    this.autoStyle = val ? true : false;\n                    break;\n                case 'auto_resize':\n                    this._autoResize = val ? true : false;\n                    break;\n                case 'draggable':\n                    this.dragEnable = val ? true : false;\n                    break;\n                case 'resizable':\n                    this.resizeEnable = val ? true : false;\n                    break;\n                case 'max_rows':\n                    maxColRowChanged = maxColRowChanged || this._maxRows != intVal;\n                    this._maxRows = intVal < 0 ? 0 : intVal;\n                    break;\n                case 'max_cols':\n                    maxColRowChanged = maxColRowChanged || this._maxCols != intVal;\n                    this._maxCols = intVal < 0 ? 0 : intVal;\n                    break;\n                case 'visible_rows':\n                    this._visibleRows = Math.max(intVal, 0);\n                    break;\n                case 'visible_cols':\n                    this._visibleCols = Math.max(intVal, 0);\n                    break;\n                case 'min_rows':\n                    this.minRows = Math.max(intVal, 1);\n                    break;\n                case 'min_cols':\n                    this.minCols = Math.max(intVal, 1);\n                    break;\n                case 'min_height':\n                    this.minHeight = Math.max(intVal, 1);\n                    break;\n                case 'min_width':\n                    this.minWidth = Math.max(intVal, 1);\n                    break;\n                case 'zoom_on_drag':\n                    this._zoomOnDrag = val ? true : false;\n                    break;\n                case 'cascade':\n                    if (this.cascade != val) {\n                        this.cascade = val;\n                        this._cascadeGrid();\n                    }\n                    break;\n                case 'fix_to_grid':\n                    this._fixToGrid = val ? true : false;\n                    break;\n                case 'maintain_ratio':\n                    this._maintainRatio = val ? true : false;\n                    break;\n                case 'prefer_new':\n                    this._preferNew = val ? true : false;\n                    break;\n                case 'limit_to_screen':\n                    this._limitToScreen = !this._autoResize && !!val;\n                    break;\n                case 'center_to_screen':\n                    this._centerToScreen = val ? true : false;\n                    break;\n                case 'resize_directions':\n                    this.resizeDirections = val || ['bottomright', 'bottomleft', 'topright', 'topleft', 'right', 'left', 'bottom', 'top'];\n                    break;\n                case 'element_based_row_height':\n                    this._elementBasedDynamicRowHeight = !!val;\n                    break;\n                case 'fix_item_position_direction':\n                    this._itemFixDirection = val;\n                    break;\n                case 'fix_collision_position_direction':\n                    this._collisionFixDirection = val;\n                    break;\n                case 'allow_overlap':\n                    this._allowOverlap = !!val;\n                    break;\n            }\n        }\n\n        if (this._allowOverlap && this.cascade !== 'off' && this.cascade !== '') {\n            console.warn('Unable to overlap items when a cascade direction is set.');\n            this._allowOverlap = false;\n        }\n\n        if (this.dragEnable || this.resizeEnable) {\n            this._enableListeners();\n        } else {\n            this._disableListeners();\n        }\n\n        if (this._itemFixDirection === 'cascade') {\n            this._itemFixDirection = this._getFixDirectionFromCascade();\n        }\n\n        if (this._collisionFixDirection === 'cascade') {\n            this._collisionFixDirection = this._getFixDirectionFromCascade();\n        }\n\n        if (this._limitToScreen) {\n            const newMaxCols = this._getContainerColumns();\n\n            if (this._maxCols != newMaxCols) {\n                this._maxCols = newMaxCols;\n                maxColRowChanged = true;\n            }\n        }\n\n        if (this._limitToScreen && this._centerToScreen) {\n            this.screenMargin = this._getScreenMargin();\n        } else {\n            this.screenMargin = 0;\n        }\n\n        if (this._maintainRatio) {\n            if (this.colWidth && this.rowHeight) {\n                this._aspectRatio = this.colWidth / this.rowHeight;\n            } else {\n                this._maintainRatio = false;\n            }\n        }\n\n        if (maxColRowChanged) {\n            if (this._maxCols > 0 && this._maxRows > 0) {    //    Can't have both, prioritise on cascade\n                switch (this.cascade) {\n                    case 'left':\n                    case 'right':\n                        this._maxCols = 0;\n                        break;\n                    case 'up':\n                    case 'down':\n                    default:\n                        this._maxRows = 0;\n                        break;\n                }\n            }\n\n            this._updatePositionsAfterMaxChange();\n        }\n\n        this._calculateColWidth();\n        this._calculateRowHeight();\n\n        var maxWidth = this._maxCols * this.colWidth;\n        var maxHeight = this._maxRows * this.rowHeight;\n\n        if (maxWidth > 0 && this.minWidth > maxWidth) this.minWidth = 0.75 * this.colWidth;\n        if (maxHeight > 0 && this.minHeight > maxHeight) this.minHeight = 0.75 * this.rowHeight;\n\n        if (this.minWidth > this.colWidth) this.minCols = Math.max(this.minCols, Math.ceil(this.minWidth / this.colWidth));\n        if (this.minHeight > this.rowHeight) this.minRows = Math.max(this.minRows, Math.ceil(this.minHeight / this.rowHeight));\n\n        if (this._maxCols > 0 && this.minCols > this._maxCols) this.minCols = 1;\n        if (this._maxRows > 0 && this.minRows > this._maxRows) this.minRows = 1;\n\n        this._updateRatio();\n\n        this._items.forEach((item: NgGridItem) => {\n            this._removeFromGrid(item);\n            item.setCascadeMode(this.cascade);\n        });\n\n        this._items.forEach((item: NgGridItem) => {\n            item.recalculateSelf();\n            this._addToGrid(item);\n        });\n\n        this._cascadeGrid();\n        this._updateSize();\n    }\n\n    public getItemPosition(itemId: string): NgGridItemPosition {\n        return this._items.has(itemId) ? this._items.get(itemId).getGridPosition() : null;\n    }\n\n    public getItemSize(itemId: string): NgGridItemSize {\n        return this._items.has(itemId) ? this._items.get(itemId).getSize() : null;\n    }\n\n    public ngDoCheck(): boolean {\n        if (this._differ != null) {\n            var changes = this._differ.diff(this._config);\n\n            if (changes != null) {\n                this._applyChanges(changes);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public setMargins(margins: Array<string>): void {\n        this.marginTop = Math.max(parseInt(margins[0]), 0);\n        this.marginRight = margins.length >= 2 ? Math.max(parseInt(margins[1]), 0) : this.marginTop;\n        this.marginBottom = margins.length >= 3 ? Math.max(parseInt(margins[2]), 0) : this.marginTop;\n        this.marginLeft = margins.length >= 4 ? Math.max(parseInt(margins[3]), 0) : this.marginRight;\n    }\n\n    public enableDrag(): void {\n        this.dragEnable = true;\n    }\n\n    public disableDrag(): void {\n        this.dragEnable = false;\n    }\n\n    public enableResize(): void {\n        this.resizeEnable = true;\n    }\n\n    public disableResize(): void {\n        this.resizeEnable = false;\n    }\n\n    public addItem(ngItem: NgGridItem): void {\n        ngItem.setCascadeMode(this.cascade);\n\n        if (!this._preferNew) {\n            var newPos = this._fixGridPosition(ngItem.getGridPosition(), ngItem.getSize());\n            ngItem.setGridPosition(newPos);\n        }\n\n        if (ngItem.uid === null || this._items.has(ngItem.uid)) {\n            ngItem.uid = this.generateItemUid();\n        }\n\n        this._items.set(ngItem.uid, ngItem);\n        this._addToGrid(ngItem);\n\n        this._updateSize();\n\n        this.triggerCascade().then(() => {\n            ngItem.recalculateSelf();\n            ngItem.onCascadeEvent();\n\n            this._emitOnItemChange();\n        });\n\n    }\n\n    public removeItem(ngItem: NgGridItem): void {\n        this._removeFromGrid(ngItem);\n\n        this._items.delete(ngItem.uid);\n\n        if (this._destroyed) return;\n\n        this.triggerCascade().then(() => {\n            this._updateSize();\n            this._items.forEach((item: NgGridItem) => item.recalculateSelf());\n            this._emitOnItemChange();\n        });\n    }\n\n    public updateItem(ngItem: NgGridItem): void {\n        this._removeFromGrid(ngItem);\n        this._addToGrid(ngItem);\n\n        this.triggerCascade().then(() => {\n            this._updateSize();\n            ngItem.onCascadeEvent();\n        });\n    }\n\n    public triggerCascade(): Promise<void> {\n        if (!this._cascadePromise) {\n            this._cascadePromise = new Promise<void>((resolve: () => void) => {\n                setTimeout(() => {\n                    this._cascadePromise = null;\n                    this._cascadeGrid(null, null);\n                    resolve();\n                }, 0);\n            });\n        }\n\n        return this._cascadePromise;\n    }\n\n    public triggerResize(): void {\n        this.resizeEventHandler(null);\n    }\n\n    public resizeEventHandler(e: any): void {\n        // this._calculateColWidth();\n        // this._calculateRowHeight();\n\n        // this._updateRatio();\n\n        if (this._limitToScreen) {\n            const newMaxColumns = this._getContainerColumns();\n            if (this._maxCols !== newMaxColumns) {\n                this._maxCols = newMaxColumns;\n                // this._updatePositionsAfterMaxChange();\n                // this._cascadeGrid();\n            }\n\n            if (this._centerToScreen) {\n                this.screenMargin = this._getScreenMargin();\n\n                this._items.forEach((item: NgGridItem) => {\n                    item.recalculateSelf();\n                });\n            }\n        } else if (this._autoResize) {\n            this._items.forEach((item: NgGridItem) => {\n                item.recalculateSelf();\n            });\n        }\n\n        // this._updateSize();\n    }\n\n    public mouseDownEventHandler(e: MouseEvent | TouchEvent): void {\n        var mousePos = this._getMousePosition(e);\n        var item = this._getItemFromPosition(mousePos, e);\n\n        if (item == null) return;\n\n        const resizeDirection: string = item.canResize(e);\n\n        if (this.resizeEnable && resizeDirection) {\n            this._resizeReady = true;\n            this._resizingItem = item;\n            this._resizeDirection = resizeDirection;\n\n            e.preventDefault();\n        } else if (this.dragEnable && item.canDrag(e)) {\n            this._dragReady = true;\n            this._draggingItem = item;\n\n            const itemPos = item.getPosition();\n            this._posOffset = { 'left': (mousePos.left - itemPos.left), 'top': (mousePos.top - itemPos.top) }\n\n            e.preventDefault();\n        }\n    }\n\n    public mouseUpEventHandler(e: MouseEvent | TouchEvent): void {\n        if (this.isDragging) {\n            this._dragStop(e);\n        } else if (this.isResizing) {\n            this._resizeStop(e);\n        } else if (this._dragReady || this._resizeReady) {\n            this._cleanDrag();\n            this._cleanResize();\n        }\n    }\n\n    public mouseMoveEventHandler(e: MouseEvent | TouchEvent): void {\n        if (this._resizeReady) {\n            this._resizeStart(e);\n            e.preventDefault();\n            return;\n        } else if (this._dragReady) {\n            this._dragStart(e);\n            e.preventDefault();\n            return;\n        }\n\n        if (this.isDragging) {\n            this._drag(e);\n        } else if (this.isResizing) {\n            this._resize(e);\n        } else {\n            var mousePos = this._getMousePosition(e);\n            var item = this._getItemFromPosition(mousePos);\n\n            if (item) {\n                item.onMouseMove(e);\n            }\n        }\n    }\n\n    //    Private methods\n    private _getFixDirectionFromCascade(): NgConfigFixDirection {\n        switch (this.cascade) {\n            case 'up':\n            case 'down':\n            default:\n                return 'vertical';\n            case 'left':\n            case 'right':\n                return 'horizontal';\n        }\n    }\n    private _updatePositionsAfterMaxChange(): void {\n        this._items.forEach((item: NgGridItem) => {\n            var pos = item.getGridPosition();\n            var dims = item.getSize();\n\n            if (!this._hasGridCollision(pos, dims) && this._isWithinBounds(pos, dims) && dims.x <= this._maxCols && dims.y <= this._maxRows) {\n                return;\n            }\n\n            this._removeFromGrid(item);\n\n            if (this._maxCols > 0 && dims.x > this._maxCols) {\n                dims.x = this._maxCols;\n                item.setSize(dims);\n            } else if (this._maxRows > 0 && dims.y > this._maxRows) {\n                dims.y = this._maxRows;\n                item.setSize(dims);\n            }\n\n            if (this._hasGridCollision(pos, dims) || !this._isWithinBounds(pos, dims, true)) {\n                var newPosition = this._fixGridPosition(pos, dims);\n                item.setGridPosition(newPosition);\n            }\n\n            this._addToGrid(item);\n        });\n    }\n\n    private _calculateColWidth(): void {\n        if (this._autoResize) {\n            if (this._maxCols > 0 || this._visibleCols > 0) {\n                var maxCols = this._maxCols > 0 ? this._maxCols : this._visibleCols;\n                var maxWidth: number = this._ngEl.nativeElement.getBoundingClientRect().width;\n\n                var colWidth: number = Math.floor(maxWidth / maxCols);\n                colWidth -= (this.marginLeft + this.marginRight);\n                if (colWidth > 0) this.colWidth = colWidth;\n\n            }\n        }\n\n        if (this.colWidth < this.minWidth || this.minCols > this._config.min_cols) {\n            this.minCols = Math.max(this._config.min_cols, Math.ceil(this.minWidth / this.colWidth));\n        }\n    }\n\n    private _calculateRowHeight(): void {\n        if (this._autoResize) {\n            if (this._maxRows > 0 || this._visibleRows > 0) {\n                var maxRows = this._maxRows > 0 ? this._maxRows : this._visibleRows;\n                let maxHeight: number;\n\n                if (this._elementBasedDynamicRowHeight) {\n                    maxHeight = this._ngEl.nativeElement.getBoundingClientRect().height;\n                } else {\n                    maxHeight = window.innerHeight - this.marginTop - this.marginBottom;\n                }\n\n                var rowHeight: number = Math.max(Math.floor(maxHeight / maxRows), this.minHeight);\n                rowHeight -= (this.marginTop + this.marginBottom);\n                if (rowHeight > 0) this.rowHeight = rowHeight;\n\n            }\n        }\n\n        if (this.rowHeight < this.minHeight || this.minRows > this._config.min_rows) {\n            this.minRows = Math.max(this._config.min_rows, Math.ceil(this.minHeight / this.rowHeight));\n        }\n    }\n\n    private _updateRatio(): void {\n        if (!this._autoResize || !this._maintainRatio) return;\n\n        if (this._maxCols > 0 && this._visibleRows <= 0) {\n            this.rowHeight = this.colWidth / this._aspectRatio;\n        } else if (this._maxRows > 0 && this._visibleCols <= 0) {\n            this.colWidth = this._aspectRatio * this.rowHeight;\n        } else if (this._maxCols == 0 && this._maxRows == 0) {\n            if (this._visibleCols > 0) {\n                this.rowHeight = this.colWidth / this._aspectRatio;\n            } else if (this._visibleRows > 0) {\n                this.colWidth = this._aspectRatio * this.rowHeight;\n            }\n        }\n    }\n\n    private _applyChanges(changes: any): void {\n        changes.forEachAddedItem((record: any) => { this._config[record.key] = record.currentValue; });\n        changes.forEachChangedItem((record: any) => { this._config[record.key] = record.currentValue; });\n        changes.forEachRemovedItem((record: any) => { delete this._config[record.key]; });\n\n        this.setConfig(this._config);\n    }\n\n    private _resizeStart(e: any): void {\n        if (!this.resizeEnable || !this._resizingItem) return;\n\n        //    Setup\n        this._resizingItem.startMoving();\n        this._removeFromGrid(this._resizingItem);\n        this._createPlaceholder(this._resizingItem);\n\n        if (this._allowOverlap) {\n            this._resizingItem.zIndex = this._lastZValue++;\n        }\n\n        //    Status Flags\n        this.isResizing = true;\n        this._resizeReady = false;\n\n        //    Events\n        this.onResizeStart.emit(this._resizingItem);\n        this._resizingItem.onResizeStartEvent();\n    }\n\n    private _dragStart(e: any): void {\n        if (!this.dragEnable || !this._draggingItem) return;\n\n        //    Start dragging\n        this._draggingItem.startMoving();\n        this._removeFromGrid(this._draggingItem);\n        this._createPlaceholder(this._draggingItem);\n\n        if (this._allowOverlap) {\n            this._draggingItem.zIndex = this._lastZValue++;\n        }\n\n        //    Status Flags\n        this.isDragging = true;\n        this._dragReady = false;\n\n        //    Events\n        this.onDragStart.emit(this._draggingItem);\n        this._draggingItem.onDragStartEvent();\n\n        //    Zoom\n        if (this._zoomOnDrag) {\n            this._zoomOut();\n        }\n    }\n\n    private _zoomOut(): void {\n        this._renderer.setStyle(this._ngEl.nativeElement, 'transform', 'scale(0.5, 0.5)');\n    }\n\n    private _resetZoom(): void {\n        this._renderer.setStyle(this._ngEl.nativeElement, 'transform', '');\n    }\n\n    private _drag(e: any): void {\n        if (!this.isDragging) return;\n\n        if (window.getSelection) {\n            if (window.getSelection().empty) {\n                window.getSelection().empty();\n            } else if (window.getSelection().removeAllRanges) {\n                window.getSelection().removeAllRanges();\n            }\n        } else if ((<any>document).selection) {\n            (<any>document).selection.empty();\n        }\n\n        var mousePos = this._getMousePosition(e);\n        var newL = (mousePos.left - this._posOffset.left);\n        var newT = (mousePos.top - this._posOffset.top);\n\n        var itemPos = this._draggingItem.getGridPosition();\n        var gridPos = this._calculateGridPosition(newL, newT);\n        var dims = this._draggingItem.getSize();\n\n        gridPos = this._fixPosToBoundsX(gridPos, dims);\n\n        if (!this._isWithinBoundsY(gridPos, dims)) {\n            gridPos = this._fixPosToBoundsY(gridPos, dims);\n        }\n\n        if (gridPos.col != itemPos.col || gridPos.row != itemPos.row) {\n            this._draggingItem.setGridPosition(gridPos, this._fixToGrid);\n            this._placeholderRef.instance.setGridPosition(gridPos);\n\n            if (['up', 'down', 'left', 'right'].indexOf(this.cascade) >= 0) {\n                this._fixGridCollisions(gridPos, dims);\n                this._cascadeGrid(gridPos, dims);\n            }\n        }\n\n        if (!this._fixToGrid) {\n            this._draggingItem.setPosition(newL, newT);\n        }\n\n        this.onDrag.emit(this._draggingItem);\n        this._draggingItem.onDragEvent();\n    }\n\n    private _resize(e: any): void {\n        if (!this.isResizing) { return; }\n\n        if (window.getSelection) {\n            if (window.getSelection().empty) {\n                window.getSelection().empty();\n            } else if (window.getSelection().removeAllRanges) {\n                window.getSelection().removeAllRanges();\n            }\n        } else if ((<any>document).selection) {\n            (<any>document).selection.empty();\n        }\n\n        const mousePos = this._getMousePosition(e);\n        const itemPos = this._resizingItem.getPosition();\n        const itemDims = this._resizingItem.getDimensions();\n        const endCorner = {\n            left: itemPos.left + itemDims.width,\n            top: itemPos.top + itemDims.height,\n        }\n\n        const resizeTop = this._resizeDirection.includes('top');\n        const resizeBottom = this._resizeDirection.includes('bottom');\n        const resizeLeft = this._resizeDirection.includes('left')\n        const resizeRight = this._resizeDirection.includes('right');\n\n        // Calculate new width and height based upon resize direction\n        let newW = resizeRight\n            ? (mousePos.left - itemPos.left + 1)\n            : resizeLeft\n                ? (endCorner.left - mousePos.left + 1)\n                : itemDims.width;\n        let newH = resizeBottom\n            ? (mousePos.top - itemPos.top + 1)\n            : resizeTop\n                ? (endCorner.top - mousePos.top + 1)\n                : itemDims.height;\n\n        if (newW < this.minWidth)\n            newW = this.minWidth;\n        if (newH < this.minHeight)\n            newH = this.minHeight;\n        if (newW < this._resizingItem.minWidth)\n            newW = this._resizingItem.minWidth;\n        if (newH < this._resizingItem.minHeight)\n            newH = this._resizingItem.minHeight;\n\n        let newX = itemPos.left;\n        let newY = itemPos.top;\n\n        if (resizeLeft)\n            newX = endCorner.left - newW;\n        if (resizeTop)\n            newY = endCorner.top - newH;\n\n        let calcSize = this._calculateGridSize(newW, newH);\n        const itemSize = this._resizingItem.getSize();\n        const iGridPos = this._resizingItem.getGridPosition();\n        const bottomRightCorner = {\n            col: iGridPos.col + itemSize.x,\n            row: iGridPos.row + itemSize.y,\n        };\n        const targetPos: NgGridItemPosition = Object.assign({}, iGridPos);\n\n        if (this._resizeDirection.includes('top'))\n            targetPos.row = bottomRightCorner.row - calcSize.y;\n        if (this._resizeDirection.includes('left'))\n            targetPos.col = bottomRightCorner.col - calcSize.x;\n\n        if (!this._isWithinBoundsX(targetPos, calcSize))\n            calcSize = this._fixSizeToBoundsX(targetPos, calcSize);\n\n        if (!this._isWithinBoundsY(targetPos, calcSize))\n            calcSize = this._fixSizeToBoundsY(targetPos, calcSize);\n\n        calcSize = this._resizingItem.fixResize(calcSize);\n\n        if (calcSize.x != itemSize.x || calcSize.y != itemSize.y) {\n            this._resizingItem.setGridPosition(targetPos, this._fixToGrid);\n            this._placeholderRef.instance.setGridPosition(targetPos);\n            this._resizingItem.setSize(calcSize, this._fixToGrid);\n            this._placeholderRef.instance.setSize(calcSize);\n\n            if (['up', 'down', 'left', 'right'].indexOf(this.cascade) >= 0) {\n                this._fixGridCollisions(targetPos, calcSize);\n                this._cascadeGrid(targetPos, calcSize);\n            }\n        }\n\n        if (!this._fixToGrid) {\n            this._resizingItem.setDimensions(newW, newH);\n            this._resizingItem.setPosition(newX, newY);\n        }\n\n        this.onResize.emit(this._resizingItem);\n        this._resizingItem.onResizeEvent();\n    }\n\n    private _dragStop(e: any): void {\n        if (!this.isDragging) return;\n\n        this.isDragging = false;\n\n        var itemPos = this._draggingItem.getGridPosition();\n\n        this._draggingItem.setGridPosition(itemPos);\n        this._addToGrid(this._draggingItem);\n\n        this._cascadeGrid();\n        this._updateSize();\n\n        this._draggingItem.stopMoving();\n        this._draggingItem.onDragStopEvent();\n        this.onDragStop.emit(this._draggingItem);\n\n        this._cleanDrag();\n        this._placeholderRef.destroy();\n\n        this._emitOnItemChange();\n\n        if (this._zoomOnDrag) {\n            this._resetZoom();\n        }\n    }\n\n    private _resizeStop(e: any): void {\n        if (!this.isResizing) return;\n\n        this.isResizing = false;\n\n        const itemDims = this._resizingItem.getSize();\n        this._resizingItem.setSize(itemDims);\n\n        const itemPos = this._resizingItem.getGridPosition();\n        this._resizingItem.setGridPosition(itemPos);\n\n        this._addToGrid(this._resizingItem);\n\n        this._cascadeGrid();\n        this._updateSize();\n\n        this._resizingItem.stopMoving();\n        this._resizingItem.onResizeStopEvent();\n        this.onResizeStop.emit(this._resizingItem);\n\n        this._cleanResize();\n        this._placeholderRef.destroy();\n\n        this._emitOnItemChange();\n    }\n\n    private _cleanDrag(): void {\n        this._draggingItem = null;\n        this._posOffset = null;\n        this.isDragging = false;\n        this._dragReady = false;\n    }\n\n    private _cleanResize(): void {\n        this._resizingItem = null;\n        this._resizeDirection = null;\n        this.isResizing = false;\n        this._resizeReady = false;\n    }\n\n    private _calculateGridSize(width: number, height: number): NgGridItemSize {\n        width += this.marginLeft + this.marginRight;\n        height += this.marginTop + this.marginBottom;\n\n        var sizex = Math.max(this.minCols, Math.round(width / (this.colWidth + this.marginLeft + this.marginRight)));\n        var sizey = Math.max(this.minRows, Math.round(height / (this.rowHeight + this.marginTop + this.marginBottom)));\n\n        if (!this._isWithinBoundsX({ col: 1, row: 1 }, { x: sizex, y: sizey })) sizex = this._maxCols;\n        if (!this._isWithinBoundsY({ col: 1, row: 1 }, { x: sizex, y: sizey })) sizey = this._maxRows;\n\n        return { 'x': sizex, 'y': sizey };\n    }\n\n    private _calculateGridPosition(left: number, top: number): NgGridItemPosition {\n        var col = Math.max(1, Math.round(left / (this.colWidth + this.marginLeft + this.marginRight)) + 1);\n        var row = Math.max(1, Math.round(top / (this.rowHeight + this.marginTop + this.marginBottom)) + 1);\n\n        if (!this._isWithinBoundsX({ col: col, row: row }, { x: 1, y: 1 })) col = this._maxCols;\n        if (!this._isWithinBoundsY({ col: col, row: row }, { x: 1, y: 1 })) row = this._maxRows;\n\n        return { 'col': col, 'row': row };\n    }\n\n    private _hasGridCollision(pos: NgGridItemPosition, dims: NgGridItemSize): boolean {\n        return false;\n    }\n\n    private _getCollisions(pos: NgGridItemPosition, dims: NgGridItemSize): Array<NgGridItem> {\n        if (this._allowOverlap) return [];\n\n        const returns: Array<NgGridItem> = [];\n\n        if (!pos.col) { pos.col = 1; }\n        if (!pos.row) { pos.row = 1; }\n\n        const leftCol = pos.col;\n        const rightCol = pos.col + dims.x;\n        const topRow = pos.row;\n        const bottomRow = pos.row + dims.y;\n\n        this._itemsInGrid.forEach((itemId: string) => {\n            const item: NgGridItem = this._items.get(itemId);\n\n            if (!item) {\n                this._itemsInGrid.delete(itemId);\n                return;\n            }\n\n            const itemLeftCol = item.col;\n            const itemRightCol = item.col + item.sizex;\n            const itemTopRow = item.row;\n            const itemBottomRow = item.row + item.sizey;\n\n            const withinColumns = leftCol < itemRightCol && itemLeftCol < rightCol;\n            const withinRows = topRow < itemBottomRow && itemTopRow < bottomRow;\n\n            if (withinColumns && withinRows) {\n                returns.push(item);\n            }\n        });\n\n        return returns;\n    }\n\n    private _fixGridCollisions(pos: NgGridItemPosition, dims: NgGridItemSize): void {\n        const collisions: Array<NgGridItem> = this._getCollisions(pos, dims);\n        if (collisions.length === 0) { return; }\n\n        for (let collision of collisions) {\n            this._removeFromGrid(collision);\n\n            const itemDims: NgGridItemSize = collision.getSize();\n            const itemPos: NgGridItemPosition = collision.getGridPosition();\n            let newItemPos: NgGridItemPosition = { col: itemPos.col, row: itemPos.row };\n\n            if (this._collisionFixDirection === 'vertical') {\n                newItemPos.row = pos.row + dims.y;\n\n                if (!this._isWithinBoundsY(newItemPos, itemDims)) {\n                    newItemPos.col = pos.col + dims.x;\n                    newItemPos.row = 1;\n                }\n            } else if (this._collisionFixDirection === 'horizontal') {\n                newItemPos.col = pos.col + dims.x;\n\n                if (!this._isWithinBoundsX(newItemPos, itemDims)) {\n                    newItemPos.col = 1;\n                    newItemPos.row = pos.row + dims.y;\n                }\n            }\n\n            collision.setGridPosition(newItemPos);\n\n            this._fixGridCollisions(newItemPos, itemDims);\n            this._addToGrid(collision);\n            collision.onCascadeEvent();\n        }\n\n        this._fixGridCollisions(pos, dims);\n    }\n\n    private _cascadeGrid(pos?: NgGridItemPosition, dims?: NgGridItemSize): void {\n        if (this._destroyed) return;\n        if (this._allowOverlap) return;\n        if (!pos !== !dims) throw new Error('Cannot cascade with only position and not dimensions');\n\n        if (this.isDragging && this._draggingItem && !pos && !dims) {\n            pos = this._draggingItem.getGridPosition();\n            dims = this._draggingItem.getSize();\n        } else if (this.isResizing && this._resizingItem && !pos && !dims) {\n            pos = this._resizingItem.getGridPosition();\n            dims = this._resizingItem.getSize();\n        }\n\n        let itemsInGrid: NgGridItem[] = Array.from(this._itemsInGrid, (itemId: string) => this._items.get(itemId));\n\n        switch (this.cascade) {\n            case 'up':\n            case 'down':\n                itemsInGrid = itemsInGrid.sort(NgGridHelper.sortItemsByPositionVertical);\n                const lowestRowPerColumn: Map<number, number> = new Map<number, number>();\n\n                for (let item of itemsInGrid) {\n                    if (item.isFixed) continue;\n\n                    const itemDims: NgGridItemSize = item.getSize();\n                    const itemPos: NgGridItemPosition = item.getGridPosition();\n\n                    let lowestRowForItem: number = lowestRowPerColumn.get(itemPos.col) || 1;\n\n                    for (let i: number = 1; i < itemDims.x; i++) {\n                        const lowestRowForColumn = lowestRowPerColumn.get(itemPos.col + i) || 1;\n                        lowestRowForItem = Math.max(lowestRowForColumn, lowestRowForItem);\n                    }\n\n                    const leftCol = itemPos.col;\n                    const rightCol = itemPos.col + itemDims.x;\n\n                    if (pos && dims) {\n                        const withinColumns = rightCol > pos.col && leftCol < (pos.col + dims.x);\n\n                        if (withinColumns) {          // If our element is in one of the item's columns\n                            const roomAboveItem = itemDims.y <= (pos.row - lowestRowForItem);\n\n                            if (!roomAboveItem) {                                                  // Item can't fit above our element\n                                lowestRowForItem = Math.max(lowestRowForItem, pos.row + dims.y);   // Set the lowest row to be below it\n                            }\n                        }\n                    }\n\n                    const newPos: NgGridItemPosition = { col: itemPos.col, row: lowestRowForItem };\n\n                    //    What if it's not within bounds Y?\n                    if (lowestRowForItem != itemPos.row && this._isWithinBoundsY(newPos, itemDims)) { // If the item is not already on this row move it up\n                        this._removeFromGrid(item);\n\n                        item.setGridPosition(newPos);\n\n                        item.onCascadeEvent();\n                        this._addToGrid(item);\n                    }\n\n                    for (let i: number = 0; i < itemDims.x; i++) {\n                        lowestRowPerColumn.set(itemPos.col + i, lowestRowForItem + itemDims.y); // Update the lowest row to be below the item\n                    }\n                }\n                break;\n            case 'left':\n            case 'right':\n                itemsInGrid = itemsInGrid.sort(NgGridHelper.sortItemsByPositionHorizontal);\n                const lowestColumnPerRow: Map<number, number> = new Map<number, number>();\n\n                for (let item of itemsInGrid) {\n                    const itemDims: NgGridItemSize = item.getSize();\n                    const itemPos: NgGridItemPosition = item.getGridPosition();\n\n                    let lowestColumnForItem: number = lowestColumnPerRow.get(itemPos.row) || 1;\n\n                    for (let i: number = 1; i < itemDims.y; i++) {\n                        let lowestOffsetColumn: number = lowestColumnPerRow.get(itemPos.row + i) || 1;\n                        lowestColumnForItem = Math.max(lowestOffsetColumn, lowestColumnForItem);\n                    }\n\n                    const topRow = itemPos.row;\n                    const bottomRow = itemPos.row + itemDims.y;\n\n                    if (pos && dims) {\n                        const withinRows = bottomRow > pos.col && topRow < (pos.col + dims.x);\n\n                        if (withinRows) {          // If our element is in one of the item's rows\n                            const roomNextToItem = itemDims.x <= (pos.col - lowestColumnForItem);\n\n                            if (!roomNextToItem) {                                                      // Item can't fit next to our element\n                                lowestColumnForItem = Math.max(lowestColumnForItem, pos.col + dims.x);  // Set the lowest col to be the other side of it\n                            }\n                        }\n                    }\n\n                    const newPos: NgGridItemPosition = { col: lowestColumnForItem, row: itemPos.row };\n\n                    if (lowestColumnForItem != itemPos.col && this._isWithinBoundsX(newPos, itemDims)) { // If the item is not already on this col move it up\n                        this._removeFromGrid(item);\n\n                        item.setGridPosition(newPos);\n\n                        item.onCascadeEvent();\n                        this._addToGrid(item);\n                    }\n\n                    for (let i: number = 0; i < itemDims.y; i++) {\n                        lowestColumnPerRow.set(itemPos.row + i, lowestColumnForItem + itemDims.x); // Update the lowest col to be below the item\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    private _fixGridPosition(pos: NgGridItemPosition, dims: NgGridItemSize): NgGridItemPosition {\n        if (!this._hasGridCollision(pos, dims)) return pos;\n\n        const maxRow = this._maxRows === 0 ? this._getMaxRow() : this._maxRows;\n        const maxCol = this._maxCols === 0 ? this._getMaxCol() : this._maxCols;\n        const newPos = {\n            col: pos.col,\n            row: pos.row,\n        };\n\n        if (this._itemFixDirection === 'vertical') {\n            fixLoop:\n            for (; newPos.col <= maxRow;) {\n                const itemsInPath = this._getItemsInVerticalPath(newPos, dims, newPos.row);\n                let nextRow = newPos.row;\n\n                for (let item of itemsInPath) {\n                    if (item.row - nextRow >= dims.y) {\n                        newPos.row = nextRow;\n                        break fixLoop;\n                    }\n\n                    nextRow = item.row + item.sizey;\n                }\n\n                if (maxRow - nextRow >= dims.y) {\n                    newPos.row = nextRow;\n                    break fixLoop;\n                }\n\n                newPos.col = Math.max(newPos.col + 1, Math.min.apply(Math, itemsInPath.map((item) => item.col + dims.x)));\n                newPos.row = 1;\n            }\n        } else if (this._itemFixDirection === 'horizontal') {\n            fixLoop:\n            for (; newPos.row <= maxRow;) {\n                const itemsInPath = this._getItemsInHorizontalPath(newPos, dims, newPos.col);\n                let nextCol = newPos.col;\n\n                for (let item of itemsInPath) {\n                    if (item.col - nextCol >= dims.x) {\n                        newPos.col = nextCol;\n                        break fixLoop;\n                    }\n\n                    nextCol = item.col + item.sizex;\n                }\n\n                if (maxCol - nextCol >= dims.x) {\n                    newPos.col = nextCol;\n                    break fixLoop;\n                }\n\n                newPos.row = Math.max(newPos.row + 1, Math.min.apply(Math, itemsInPath.map((item) => item.row + dims.y)));\n                newPos.col = 1;\n            }\n        }\n\n        return newPos;\n    }\n\n    private _getItemsInHorizontalPath(pos: NgGridItemPosition, dims: NgGridItemSize, startColumn: number = 0): NgGridItem[] {\n        const itemsInPath: NgGridItem[] = [];\n        const topRow: number = pos.row + dims.y - 1;\n\n        this._itemsInGrid.forEach((itemId: string) => {\n            const item = this._items.get(itemId);\n            if (item.col + item.sizex - 1 < startColumn) { return; }    // Item falls after start column\n            if (item.row > topRow) { return; }                          // Item falls above path\n            if (item.row + item.sizey - 1 < pos.row) { return; }        // Item falls below path\n            itemsInPath.push(item);\n        });\n\n        return itemsInPath;\n    }\n\n    private _getItemsInVerticalPath(pos: NgGridItemPosition, dims: NgGridItemSize, startRow: number = 0): NgGridItem[] {\n        const itemsInPath: NgGridItem[] = [];\n        const rightCol: number = pos.col + dims.x - 1;\n\n        this._itemsInGrid.forEach((itemId: string) => {\n            const item = this._items.get(itemId);\n            if (item.row + item.sizey - 1 < startRow) { return; }   // Item falls above start row\n            if (item.col > rightCol) { return; }                    // Item falls after path\n            if (item.col + item.sizex - 1 < pos.col) { return; }    // Item falls before path\n            itemsInPath.push(item);\n        });\n\n        return itemsInPath;\n    }\n\n    private _isWithinBoundsX(pos: NgGridItemPosition, dims: NgGridItemSize, allowExcessiveItems: boolean = false) {\n        return this._maxCols == 0 || (allowExcessiveItems && pos.col == 1) || (pos.col + dims.x - 1) <= this._maxCols;\n    }\n\n    private _fixPosToBoundsX(pos: NgGridItemPosition, dims: NgGridItemSize): NgGridItemPosition {\n        if (!this._isWithinBoundsX(pos, dims)) {\n            pos.col = Math.max(this._maxCols - (dims.x - 1), 1);\n            pos.row ++;\n        }\n        return pos;\n    }\n\n    private _fixSizeToBoundsX(pos: NgGridItemPosition, dims: NgGridItemSize): NgGridItemSize {\n        if (!this._isWithinBoundsX(pos, dims)) {\n            dims.x = Math.max(this._maxCols - (pos.col - 1), 1);\n            dims.y++;\n        }\n        return dims;\n    }\n\n    private _isWithinBoundsY(pos: NgGridItemPosition, dims: NgGridItemSize, allowExcessiveItems: boolean = false) {\n        return this._maxRows == 0 || (allowExcessiveItems && pos.row == 1) || (pos.row + dims.y - 1) <= this._maxRows;\n    }\n\n    private _fixPosToBoundsY(pos: NgGridItemPosition, dims: NgGridItemSize): NgGridItemPosition {\n        if (!this._isWithinBoundsY(pos, dims)) {\n            pos.row = Math.max(this._maxRows - (dims.y - 1), 1);\n            pos.col++;\n        }\n        return pos;\n    }\n\n    private _fixSizeToBoundsY(pos: NgGridItemPosition, dims: NgGridItemSize): NgGridItemSize {\n        if (!this._isWithinBoundsY(pos, dims)) {\n            dims.y = Math.max(this._maxRows - (pos.row - 1), 1);\n            dims.x++;\n        }\n        return dims;\n    }\n\n    private _isWithinBounds(pos: NgGridItemPosition, dims: NgGridItemSize, allowExcessiveItems: boolean = false) {\n        return this._isWithinBoundsX(pos, dims, allowExcessiveItems) && this._isWithinBoundsY(pos, dims, allowExcessiveItems);\n    }\n\n    private _fixPosToBounds(pos: NgGridItemPosition, dims: NgGridItemSize): NgGridItemPosition {\n        return this._fixPosToBoundsX(this._fixPosToBoundsY(pos, dims), dims);\n    }\n\n    private _fixSizeToBounds(pos: NgGridItemPosition, dims: NgGridItemSize): NgGridItemSize {\n        return this._fixSizeToBoundsX(pos, this._fixSizeToBoundsY(pos, dims));\n    }\n\n    private _addToGrid(item: NgGridItem): void {\n        let pos: NgGridItemPosition = item.getGridPosition();\n        const dims: NgGridItemSize = item.getSize();\n\n        if (this._hasGridCollision(pos, dims)) {\n            this._fixGridCollisions(pos, dims);\n            pos = item.getGridPosition();\n        }\n\n        if (this._allowOverlap) {\n            item.zIndex = this._lastZValue++;\n        }\n\n        this._itemsInGrid.add(item.uid);\n    }\n\n    private _removeFromGrid(item: NgGridItem): void {\n        this._itemsInGrid.delete(item.uid);\n    }\n\n    private _updateSize(): void {\n        if (this._destroyed) return;\n        let maxCol: number = this._getMaxCol();\n        let maxRow: number = this._getMaxRow();\n\n        if (maxCol != this._curMaxCol || maxRow != this._curMaxRow) {\n            this._curMaxCol = maxCol;\n            this._curMaxRow = maxRow;\n        }\n\n        this._renderer.setStyle(this._ngEl.nativeElement, 'width', '100%');//(maxCol * (this.colWidth + this.marginLeft + this.marginRight))+'px');\n        if (!this._elementBasedDynamicRowHeight) {\n            this._renderer.setStyle(this._ngEl.nativeElement, 'height', (maxRow * (this.rowHeight + this.marginTop + this.marginBottom)) + 'px');\n        }\n    }\n\n    private _getMaxRow(): number {\n        const itemsRows: number[] = Array.from(this._itemsInGrid, (itemId: string) => {\n            const item = this._items.get(itemId);\n            if (!item) return 0;\n            return item.row + item.sizey - 1;\n        });\n\n        return Math.max.apply(null, itemsRows);\n    }\n\n    private _getMaxCol(): number {\n        const itemsCols: number[] = Array.from(this._itemsInGrid, (itemId: string) => {\n            const item = this._items.get(itemId);\n            if (!item) return 0;\n            return item.col + item.sizex - 1;\n        });\n\n        return Math.max.apply(null, itemsCols);\n    }\n\n    private _getMousePosition(e: any): NgGridRawPosition {\n        if (((<any>window).TouchEvent && e instanceof TouchEvent) || (e.touches || e.changedTouches)) {\n            e = e.touches.length > 0 ? e.touches[0] : e.changedTouches[0];\n        }\n\n        const refPos: any = this._ngEl.nativeElement.getBoundingClientRect();\n\n        let left: number = e.clientX - refPos.left;\n        let top: number = e.clientY - refPos.top;\n\n        if (this.cascade == 'down') top = refPos.top + refPos.height - e.clientY;\n        if (this.cascade == 'right') left = refPos.left + refPos.width - e.clientX;\n\n        if (this.isDragging && this._zoomOnDrag) {\n            left *= 2;\n            top *= 2;\n        }\n\n        return {\n            left: left,\n            top: top\n        };\n    }\n\n    private _getAbsoluteMousePosition(e: any): NgGridRawPosition {\n        if (((<any>window).TouchEvent && e instanceof TouchEvent) || (e.touches || e.changedTouches)) {\n            e = e.touches.length > 0 ? e.touches[0] : e.changedTouches[0];\n        }\n\n        return {\n            left: e.clientX,\n            top: e.clientY\n        };\n    }\n\n    private _getContainerColumns(): number {\n        const maxWidth: number = this._ngEl.nativeElement.getBoundingClientRect().width;\n        const itemWidth: number = this.colWidth + this.marginLeft + this.marginRight;\n        return Math.floor(maxWidth / itemWidth);\n    }\n\n    private _getContainerRows(): number {\n        const maxHeight: number = window.innerHeight - this.marginTop - this.marginBottom;\n        return Math.floor(maxHeight / (this.rowHeight + this.marginTop + this.marginBottom));\n    }\n\n    private _getScreenMargin(): number {\n        const maxWidth: number = this._ngEl.nativeElement.getBoundingClientRect().width;\n        const itemWidth: number = this.colWidth + this.marginLeft + this.marginRight;\n        return Math.floor((maxWidth - (this._maxCols * itemWidth)) / 2);\n    }\n\n    private _getItemFromPosition(position: NgGridRawPosition, e?: any): NgGridItem {\n        return Array.from(this._itemsInGrid, (itemId: string) => this._items.get(itemId)).find((item: NgGridItem) => {\n            if (!item) return false;\n\n            const size: NgGridItemDimensions = item.getDimensions();\n            const pos: NgGridRawPosition = item.getPosition();\n\n            if (e) {\n              if (e.target.closest('.modal-window.grid-item') === item.containerRef.element.nativeElement) {\n                return true;\n              } else {\n                return false;\n              }\n            }\n\n            return position.left >= pos.left && position.left < (pos.left + size.width) &&\n            position.top >= pos.top && position.top < (pos.top + size.height);\n        });\n    }\n\n    private _createPlaceholder(item: NgGridItem): void {\n        const pos: NgGridItemPosition = item.getGridPosition();\n        const dims: NgGridItemSize = item.getSize();\n\n        const factory = this.componentFactoryResolver.resolveComponentFactory(NgGridPlaceholder);\n        var componentRef: ComponentRef<NgGridPlaceholder> = item.containerRef.createComponent(factory);\n        this._placeholderRef = componentRef;\n        const placeholder: NgGridPlaceholder = componentRef.instance;\n        placeholder.registerGrid(this);\n        placeholder.setCascadeMode(this.cascade);\n        placeholder.setGridPosition({ col: pos.col, row: pos.row });\n        placeholder.setSize({ x: dims.x, y: dims.y });\n    }\n\n    private _emitOnItemChange() {\n        const itemOutput: any[] = Array.from(this._itemsInGrid)\n            .map((itemId: string) => this._items.get(itemId))\n            .filter((item: NgGridItem) => !!item)\n            .map((item: NgGridItem) => item.getEventOutput());\n\n        this.onItemChange.emit(itemOutput);\n    }\n\n    private _defineListeners(): void {\n        const element = this._ngEl.nativeElement;\n\n        this._documentMousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\n        this._documentMouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n        this._mousedown$ = fromEvent(element, 'mousedown');\n        this._mousemove$ = fromEvent(element, 'mousemove');\n        this._mouseup$ = fromEvent(element, 'mouseup');\n        this._touchstart$ = fromEvent(element, 'touchstart');\n        this._touchmove$ = fromEvent(element, 'touchmove');\n        this._touchend$ = fromEvent(element, 'touchend');\n    }\n\n    private _enableListeners(): void {\n        if (this._enabledListener) {\n            return;\n        }\n\n        this._enableMouseListeners();\n\n        if (this._isTouchDevice()) {\n            this._enableTouchListeners();\n        }\n\n        this._enabledListener = true;\n    }\n\n    private _disableListeners(): void {\n        this._subscriptions.forEach((subs: Subscription) => subs.unsubscribe());\n        this._enabledListener = false;\n    }\n\n    private _isTouchDevice(): boolean {\n        return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    };\n\n    private _enableTouchListeners(): void {\n        const touchstartSubs = this._touchstart$.subscribe((e: TouchEvent) => this.mouseDownEventHandler(e));\n        const touchmoveSubs = this._touchmove$.subscribe((e: TouchEvent) => this.mouseMoveEventHandler(e));\n        const touchendSubs = this._touchend$.subscribe((e: TouchEvent) => this.mouseUpEventHandler(e));\n\n        this._subscriptions.push(\n            touchstartSubs,\n            touchmoveSubs,\n            touchendSubs\n        );\n    }\n\n    private _enableMouseListeners(): void {\n        const documentMousemoveSubs = this._documentMousemove$.subscribe((e: MouseEvent) => this.mouseMoveEventHandler(e));\n        const documentMouseupSubs = this._documentMouseup$.subscribe((e: MouseEvent) => this.mouseUpEventHandler(e));\n        const mousedownSubs = this._mousedown$.subscribe((e: MouseEvent) => this.mouseDownEventHandler(e));\n        const mousemoveSubs = this._mousemove$.subscribe((e: MouseEvent) => this.mouseMoveEventHandler(e));\n        const mouseupSubs = this._mouseup$.subscribe((e: MouseEvent) => this.mouseUpEventHandler(e));\n\n        this._subscriptions.push(\n            documentMousemoveSubs,\n            documentMouseupSubs,\n            mousedownSubs,\n            mousemoveSubs,\n            mouseupSubs\n        );\n    }\n}\n","import { NgGrid } from './NgGrid';\nimport { NgGridItemConfig, NgGridItemEvent, NgGridItemPosition, NgGridItemSize, NgGridRawPosition, NgGridItemDimensions, ResizeHandle } from '../interfaces/INgGrid';\nimport { Directive, ElementRef, Renderer2, EventEmitter, KeyValueDiffer, KeyValueDiffers, OnInit, OnDestroy, ViewContainerRef, Output, DoCheck } from '@angular/core';\n\n@Directive({\n    selector: '[ngGridItem]',\n    inputs: ['config: ngGridItem']\n})\nexport class NgGridItem implements OnInit, OnDestroy, DoCheck {\n    // Event Emitters\n    @Output() public onItemChange: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>(false);\n    @Output() public onDragStart: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onDrag: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onDragStop: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onDragAny: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onResizeStart: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onResize: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onResizeStop: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onResizeAny: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onChangeStart: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onChange: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onChangeStop: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public onChangeAny: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\n    @Output() public ngGridItemChange: EventEmitter<NgGridItemConfig> = new EventEmitter<NgGridItemConfig>();\n\n    // Default config\n    private static CONST_DEFAULT_CONFIG: NgGridItemConfig = {\n        uid: null,\n        col: 1,\n        row: 1,\n        sizex: 1,\n        sizey: 1,\n        dragHandle: null,\n        resizeHandle: null,\n        fixed: false,\n        draggable: true,\n        resizable: true,\n        borderSize: 25,\n        resizeDirections: null,\n    };\n\n    public isFixed: boolean = false;\n    public isDraggable: boolean = true;\n    public isResizable: boolean = true;\n    public minWidth: number = 0;\n    public minHeight: number = 0;\n    public uid: string = null;\n\n    // Private variables\n    private _payload: any;\n    private _currentPosition: NgGridItemPosition = { col: 1, row: 1 };\n    private _size: NgGridItemSize = { x: 1, y: 1 };\n    private _config = NgGridItem.CONST_DEFAULT_CONFIG;\n    private _userConfig = null;\n    private _dragHandle: string;\n    private _resizeHandle: ResizeHandle;\n    private _borderSize: number;\n    private _elemWidth: number;\n    private _elemHeight: number;\n    private _elemLeft: number;\n    private _elemTop: number;\n    private _added: boolean = false;\n    private _differ: KeyValueDiffer<string, any>;\n    private _cascadeMode: string;\n    private _maxCols: number = 0;\n    private _minCols: number = 0;\n    private _maxRows: number = 0;\n    private _minRows: number = 0;\n    private _resizeDirections: string[] = [];\n    private _zIndex: number = 0;\n\n    set zIndex(zIndex: number) {\n        this._renderer.setStyle(this._ngEl.nativeElement, 'z-index', zIndex.toString());\n        this._zIndex = zIndex;\n    }\n\n    get zIndex(): number {\n        return this._zIndex;\n    }\n\n    // [ng-grid-item] handler\n    set config(v: NgGridItemConfig) {\n        this._userConfig = v;\n\n        const configObject = Object.assign({}, NgGridItem.CONST_DEFAULT_CONFIG, v);\n        for (let x in NgGridItem.CONST_DEFAULT_CONFIG)\n            if (configObject[x] == null)\n                configObject[x] = NgGridItem.CONST_DEFAULT_CONFIG[x];\n\n        this.setConfig(configObject);\n\n        if (this._userConfig != null) {\n            if (this._differ == null) {\n                this._differ = this._differs.find(this._userConfig).create();\n            }\n\n            this._differ.diff(this._userConfig);\n        }\n\n        if (!this._added) {\n            this._added = true;\n            this._ngGrid.addItem(this);\n        }\n\n        this._recalculateDimensions();\n        this._recalculatePosition();\n    }\n\n    get sizex(): number {\n        return this._size.x;\n    }\n\n    get sizey(): number {\n        return this._size.y;\n    }\n\n    get col(): number {\n        return this._currentPosition.col;\n    }\n\n    get row(): number {\n        return this._currentPosition.row;\n    }\n\n    get currentCol(): number {\n        return this._currentPosition.col;\n    }\n\n    get currentRow(): number {\n        return this._currentPosition.row;\n    }\n\n    // Constructor\n    constructor(\n        private _differs: KeyValueDiffers,\n        private _ngEl: ElementRef,\n        private _renderer: Renderer2,\n        private _ngGrid: NgGrid,\n        public containerRef: ViewContainerRef,\n    ) { }\n\n    public onResizeStartEvent(): void {\n        const event: NgGridItemEvent = this.getEventOutput();\n        this.onResizeStart.emit(event);\n        this.onResizeAny.emit(event);\n        this.onChangeStart.emit(event);\n        this.onChangeAny.emit(event);\n    }\n    public onResizeEvent(): void {\n        const event: NgGridItemEvent = this.getEventOutput();\n        this.onResize.emit(event);\n        this.onResizeAny.emit(event);\n        this.onChange.emit(event);\n        this.onChangeAny.emit(event);\n    }\n    public onResizeStopEvent(): void {\n        const event: NgGridItemEvent = this.getEventOutput();\n        this.onResizeStop.emit(event);\n        this.onResizeAny.emit(event);\n        this.onChangeStop.emit(event);\n        this.onChangeAny.emit(event);\n\n        this.onConfigChangeEvent();\n    }\n    public onDragStartEvent(): void {\n        const event: NgGridItemEvent = this.getEventOutput();\n        this.onDragStart.emit(event);\n        this.onDragAny.emit(event);\n        this.onChangeStart.emit(event);\n        this.onChangeAny.emit(event);\n    }\n    public onDragEvent(): void {\n        const event: NgGridItemEvent = this.getEventOutput();\n        this.onDrag.emit(event);\n        this.onDragAny.emit(event);\n        this.onChange.emit(event);\n        this.onChangeAny.emit(event);\n    }\n    public onDragStopEvent(): void {\n        const event: NgGridItemEvent = this.getEventOutput();\n        this.onDragStop.emit(event);\n        this.onDragAny.emit(event);\n        this.onChangeStop.emit(event);\n        this.onChangeAny.emit(event);\n\n        this.onConfigChangeEvent();\n    }\n    public onCascadeEvent(): void {\n        this.onConfigChangeEvent();\n    }\n\n    public ngOnInit(): void {\n        this._renderer.addClass(this._ngEl.nativeElement, 'grid-item');\n        if (this._ngGrid.autoStyle) this._renderer.setStyle(this._ngEl.nativeElement, 'position', 'absolute');\n        this._recalculateDimensions();\n        this._recalculatePosition();\n\n        // Force a config update in case there is no config assigned\n        this.config = this._userConfig;\n    }\n\n    // Public methods\n    public canDrag(e: any): boolean {\n        if (!this.isDraggable) return false;\n\n        if (this._dragHandle) {\n            return this.findHandle(this._dragHandle, e.target);\n        }\n\n        return true;\n    }\n\n    public findHandle(handleSelector: string, startElement: HTMLElement): boolean {\n        try {\n            let targetElem: any = startElement;\n\n            while (targetElem && targetElem != this._ngEl.nativeElement) {\n                if (this.elementMatches(targetElem, handleSelector)) return true;\n\n                targetElem = targetElem.parentElement;\n            }\n        } catch (err) {}\n\n        return false;\n    }\n\n    public canResize(e: any): string {\n        if (!this.isResizable) return null;\n\n        if (this._resizeHandle) {\n            if (typeof this._resizeHandle === 'string') {\n                return this.findHandle(this._resizeHandle, e.target) ? 'bottomright' : null;\n            }\n\n            if (typeof this._resizeHandle !== 'object') return null;\n\n            const resizeDirections = [ 'bottomright', 'bottomleft', 'topright', 'topleft', 'right', 'left', 'bottom', 'top' ];\n            for (let direction of resizeDirections) {\n                if (direction in this._resizeHandle) {\n                    if (this.findHandle(this._resizeHandle[direction], e.target)) {\n                        return direction;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        if (this._borderSize <= 0) return null;\n\n        const mousePos: NgGridRawPosition = this._getMousePosition(e);\n\n        for (let direction of this._resizeDirections) {\n            if (this.canResizeInDirection(direction, mousePos)) {\n                return direction;\n            }\n        }\n\n        return null;\n    }\n\n    public onMouseMove(e: any): void {\n        if (this._ngGrid.autoStyle) {\n            if (this._ngGrid.resizeEnable) {\n                const resizeDirection = this.canResize(e);\n\n                let cursor: string = 'default';\n                switch (resizeDirection) {\n                    case 'bottomright':\n                    case 'topleft':\n                        cursor = 'nwse-resize';\n                        break;\n                    case 'topright':\n                    case 'bottomleft':\n                        cursor = 'nesw-resize';\n                        break;\n                    case 'top':\n                    case 'bottom':\n                        cursor = 'ns-resize';\n                        break;\n                    case 'left':\n                    case 'right':\n                        cursor = 'ew-resize';\n                        break;\n                    default:\n                        if (this._ngGrid.dragEnable && this.canDrag(e)) {\n                            cursor = 'move';\n                        }\n                        break;\n                }\n\n                this._renderer.setStyle(this._ngEl.nativeElement, 'cursor', cursor);\n            } else if (this._ngGrid.dragEnable && this.canDrag(e)) {\n                this._renderer.setStyle(this._ngEl.nativeElement, 'cursor', 'move');\n            } else {\n                this._renderer.setStyle(this._ngEl.nativeElement, 'cursor', 'default');\n            }\n        }\n    }\n\n    public ngOnDestroy(): void {\n        if (this._added) this._ngGrid.removeItem(this);\n    }\n\n    //    Getters\n    public getElement(): ElementRef {\n        return this._ngEl;\n    }\n\n    public getDragHandle(): string {\n        return this._dragHandle;\n    }\n\n    public getResizeHandle(): ResizeHandle {\n        return this._resizeHandle;\n    }\n\n    public getDimensions(): NgGridItemDimensions {\n        return { 'width': this._elemWidth, 'height': this._elemHeight };\n    }\n\n    public getSize(): NgGridItemSize {\n        return this._size;\n    }\n\n    public getPosition(): NgGridRawPosition {\n        return { 'left': this._elemLeft, 'top': this._elemTop };\n    }\n\n    public getGridPosition(): NgGridItemPosition {\n        return this._currentPosition;\n    }\n\n    //    Setters\n    public setConfig(config: NgGridItemConfig): void {\n        this._config = config;\n\n        this._payload = config.payload;\n        this._currentPosition.col = config.col ? config.col : NgGridItem.CONST_DEFAULT_CONFIG.col;\n        this._currentPosition.row = config.row ? config.row : NgGridItem.CONST_DEFAULT_CONFIG.row;\n        this._size.x = config.sizex ? config.sizex : NgGridItem.CONST_DEFAULT_CONFIG.sizex;\n        this._size.y = config.sizey ? config.sizey : NgGridItem.CONST_DEFAULT_CONFIG.sizey;\n        this._dragHandle = config.dragHandle;\n        this._resizeHandle = config.resizeHandle;\n        this._borderSize = config.borderSize;\n        this.isDraggable = config.draggable ? true : false;\n        this.isResizable = config.resizable ? true : false;\n        this.isFixed = config.fixed ? true : false;\n        this._resizeDirections = config.resizeDirections || this._ngGrid.resizeDirections;\n\n        this._maxCols = !isNaN(config.maxCols) && isFinite(config.maxCols) ? config.maxCols : 0;\n        this._minCols = !isNaN(config.minCols) && isFinite(config.minCols) ? config.minCols : 0;\n        this._maxRows = !isNaN(config.maxRows) && isFinite(config.maxRows) ? config.maxRows : 0;\n        this._minRows = !isNaN(config.minRows) && isFinite(config.minRows) ? config.minRows : 0;\n\n        this.minWidth = !isNaN(config.minWidth) && isFinite(config.minWidth) ? config.minWidth : 0;\n        this.minHeight = !isNaN(config.minHeight) && isFinite(config.minHeight) ? config.minHeight : 0;\n\n        if (this._minCols > 0 && this._maxCols > 0 && this._minCols > this._maxCols) this._minCols = 0;\n        if (this._minRows > 0 && this._maxRows > 0 && this._minRows > this._maxRows) this._minRows = 0;\n\n        if (this._added) {\n            this._ngGrid.updateItem(this);\n        }\n\n        this._size = this.fixResize(this._size);\n\n        this._recalculatePosition();\n        this._recalculateDimensions();\n    }\n\n    public ngDoCheck(): boolean {\n        if (this._differ != null) {\n            const changes: any = this._differ.diff(this._userConfig);\n\n            if (changes != null) {\n                return this._applyChanges(changes);\n            }\n        }\n\n        return false;\n    }\n\n    public setSize(newSize: NgGridItemSize, update: boolean = true): void {\n        newSize = this.fixResize(newSize);\n        this._size = newSize;\n        if (update) this._recalculateDimensions();\n\n        this.onItemChange.emit(this.getEventOutput());\n    }\n\n    public setGridPosition(gridPosition: NgGridItemPosition, update: boolean = true): void {\n        this._currentPosition = gridPosition;\n        if (update) this._recalculatePosition();\n\n        this.onItemChange.emit(this.getEventOutput());\n    }\n\n    public getEventOutput(): NgGridItemEvent {\n        return <NgGridItemEvent>{\n            uid: this.uid,\n            payload: this._payload,\n            col: this._currentPosition.col,\n            row: this._currentPosition.row,\n            sizex: this._size.x,\n            sizey: this._size.y,\n            width: this._elemWidth,\n            height: this._elemHeight,\n            left: this._elemLeft,\n            top: this._elemTop\n        };\n    }\n\n    public setPosition(x: number, y: number): void {\n        switch (this._cascadeMode) {\n            case 'up':\n            case 'left':\n            default:\n                this._renderer.setStyle(this._ngEl.nativeElement, 'left', x + 'px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'top', y + 'px');\n                break;\n            case 'right':\n                this._renderer.setStyle(this._ngEl.nativeElement, 'right', x + 'px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'top', y + 'px');\n                break;\n            case 'down':\n                this._renderer.setStyle(this._ngEl.nativeElement, 'left', x + 'px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'bottom', y + 'px');\n                break;\n        }\n\n        this._elemLeft = x;\n        this._elemTop = y;\n    }\n\n    public setCascadeMode(cascade: string): void {\n        this._cascadeMode = cascade;\n        switch (cascade) {\n            case 'up':\n            case 'left':\n            default:\n                this._renderer.setStyle(this._ngEl.nativeElement, 'left', this._elemLeft + 'px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'top', this._elemTop + 'px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'right', null);\n                this._renderer.setStyle(this._ngEl.nativeElement, 'bottom', null);\n                break;\n            case 'right':\n                this._renderer.setStyle(this._ngEl.nativeElement, 'right', this._elemLeft + 'px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'top', this._elemTop + 'px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'left', null);\n                this._renderer.setStyle(this._ngEl.nativeElement, 'bottom', null);\n                break;\n            case 'down':\n                this._renderer.setStyle(this._ngEl.nativeElement, 'left', this._elemLeft + 'px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'bottom', this._elemTop + 'px');\n                this._renderer.setStyle(this._ngEl.nativeElement, 'right', null);\n                this._renderer.setStyle(this._ngEl.nativeElement, 'top', null);\n                break;\n        }\n    }\n\n    public setDimensions(w: number, h: number): void {\n        if (w < this.minWidth) w = this.minWidth;\n        if (h < this.minHeight) h = this.minHeight;\n\n        this._renderer.setStyle(this._ngEl.nativeElement, 'width', w + 'px');\n        this._renderer.setStyle(this._ngEl.nativeElement, 'height', h + 'px');\n\n        this._elemWidth = w;\n        this._elemHeight = h;\n    }\n\n    public startMoving(): void {\n        this._renderer.addClass(this._ngEl.nativeElement, 'moving');\n        const style: any = window.getComputedStyle(this._ngEl.nativeElement);\n        if (this._ngGrid.autoStyle) this._renderer.setStyle(this._ngEl.nativeElement, 'z-index', (parseInt(style.getPropertyValue('z-index')) + 1).toString());\n    }\n\n    public stopMoving(): void {\n        this._renderer.removeClass(this._ngEl.nativeElement, 'moving');\n        const style: any = window.getComputedStyle(this._ngEl.nativeElement);\n        if (this._ngGrid.autoStyle) this._renderer.setStyle(this._ngEl.nativeElement, 'z-index', (parseInt(style.getPropertyValue('z-index')) - 1).toString());\n    }\n\n    public recalculateSelf(): void {\n        this._recalculatePosition();\n        this._recalculateDimensions();\n    }\n\n    public fixResize(newSize: NgGridItemSize): NgGridItemSize {\n        if (this._maxCols > 0 && newSize.x > this._maxCols) newSize.x = this._maxCols;\n        if (this._maxRows > 0 && newSize.y > this._maxRows) newSize.y = this._maxRows;\n\n        if (this._minCols > 0 && newSize.x < this._minCols) newSize.x = this._minCols;\n        if (this._minRows > 0 && newSize.y < this._minRows) newSize.y = this._minRows;\n\n        const itemWidth = (newSize.x * this._ngGrid.colWidth) + ((this._ngGrid.marginLeft + this._ngGrid.marginRight) * (newSize.x - 1));\n        if (itemWidth < this.minWidth) newSize.x = Math.ceil((this.minWidth + this._ngGrid.marginRight + this._ngGrid.marginLeft) / (this._ngGrid.colWidth + this._ngGrid.marginRight + this._ngGrid.marginLeft));\n\n        const itemHeight = (newSize.y * this._ngGrid.rowHeight) + ((this._ngGrid.marginTop + this._ngGrid.marginBottom) * (newSize.y - 1));\n        if (itemHeight < this.minHeight) newSize.y = Math.ceil((this.minHeight + this._ngGrid.marginBottom + this._ngGrid.marginTop) / (this._ngGrid.rowHeight + this._ngGrid.marginBottom + this._ngGrid.marginTop));\n\n        return newSize;\n    }\n\n    // Private methods\n    private elementMatches(element: any, selector: string): boolean {\n        if (!element) return false;\n        if (element.matches) return element.matches(selector);\n        if (element.oMatchesSelector) return element.oMatchesSelector(selector);\n        if (element.msMatchesSelector) return element.msMatchesSelector(selector);\n        if (element.mozMatchesSelector) return element.mozMatchesSelector(selector);\n        if (element.webkitMatchesSelector) return element.webkitMatchesSelector(selector);\n\n        if (!element.document || !element.ownerDocument) return false;\n\n        const matches: any = (element.document || element.ownerDocument).querySelectorAll(selector);\n        let i: number = matches.length;\n        while (--i >= 0 && matches.item(i) !== element) { }\n        return i > -1;\n    }\n\n    private _recalculatePosition(): void {\n        const x: number = (this._ngGrid.colWidth + this._ngGrid.marginLeft + this._ngGrid.marginRight) * (this._currentPosition.col - 1) + this._ngGrid.marginLeft + this._ngGrid.screenMargin;\n        const y: number = (this._ngGrid.rowHeight + this._ngGrid.marginTop + this._ngGrid.marginBottom) * (this._currentPosition.row - 1) + this._ngGrid.marginTop;\n\n        this.setPosition(x, y);\n    }\n\n    private _recalculateDimensions(): void {\n        if (this._size.x < this._ngGrid.minCols) this._size.x = this._ngGrid.minCols;\n        if (this._size.y < this._ngGrid.minRows) this._size.y = this._ngGrid.minRows;\n\n        const newWidth: number = (this._ngGrid.colWidth * this._size.x) + ((this._ngGrid.marginLeft + this._ngGrid.marginRight) * (this._size.x - 1));\n        const newHeight: number = (this._ngGrid.rowHeight * this._size.y) + ((this._ngGrid.marginTop + this._ngGrid.marginBottom) * (this._size.y - 1));\n\n        const w: number = Math.max(this.minWidth, this._ngGrid.minWidth, newWidth);\n        const h: number = Math.max(this.minHeight, this._ngGrid.minHeight, newHeight);\n\n        this.setDimensions(w, h);\n    }\n\n    private _getMousePosition(e: any): NgGridRawPosition {\n        if (e.originalEvent && e.originalEvent.touches) {\n            const oe: any = e.originalEvent;\n            e = oe.touches.length ? oe.touches[0] : (oe.changedTouches.length ? oe.changedTouches[0] : e);\n        } else if (e.touches) {\n            e = e.touches.length ? e.touches[0] : (e.changedTouches.length ? e.changedTouches[0] : e);\n        }\n\n\n        const refPos: NgGridRawPosition = this._ngEl.nativeElement.getBoundingClientRect();\n\n        return {\n            left: e.clientX - refPos.left,\n            top: e.clientY - refPos.top\n        };\n    }\n\n    private _applyChanges(changes: any): boolean {\n        let changed: boolean = false;\n        const changeCheck = (record: any) => {\n            if (this._config[record.key] !== record.currentValue) {\n                this._config[record.key] = record.currentValue;\n                changed = true;\n            }\n        };\n        changes.forEachAddedItem(changeCheck);\n        changes.forEachChangedItem(changeCheck);\n        changes.forEachRemovedItem((record: any) => {\n            changed = true;\n            delete this._config[record.key];\n        });\n\n        if (changed) {\n            this.setConfig(this._config);\n        }\n\n        return changed;\n    }\n\n    private onConfigChangeEvent() {\n        if (this._userConfig === null) return;\n\n        this._config.sizex = this._userConfig.sizex = this._size.x;\n        this._config.sizey = this._userConfig.sizey = this._size.y;\n        this._config.col = this._userConfig.col = this._currentPosition.col;\n        this._config.row = this._userConfig.row = this._currentPosition.row;\n        this.ngGridItemChange.emit(this._userConfig);\n    }\n\n    private canResizeInDirection(direction: string, mousePos: NgGridRawPosition): boolean {\n        switch (direction) {\n            case 'bottomright':\n                return mousePos.left < this._elemWidth && mousePos.left > this._elemWidth - this._borderSize\n                    && mousePos.top < this._elemHeight && mousePos.top > this._elemHeight - this._borderSize; // tslint:disable-line:indent\n            case 'bottomleft':\n                return mousePos.left < this._borderSize && mousePos.top < this._elemHeight\n                    && mousePos.top > this._elemHeight - this._borderSize; // tslint:disable-line:indent\n            case 'topright':\n                return mousePos.left < this._elemWidth && mousePos.left > this._elemWidth - this._borderSize\n                    && mousePos.top < this._borderSize; // tslint:disable-line:indent\n            case 'topleft':\n                return mousePos.left < this._borderSize && mousePos.top < this._borderSize;\n            case 'right':\n                return mousePos.left < this._elemWidth && mousePos.left > this._elemWidth - this._borderSize;\n            case 'left':\n                return mousePos.left < this._borderSize;\n            case 'bottom':\n                return mousePos.top < this._elemHeight && mousePos.top > this._elemHeight - this._borderSize;\n            case 'top':\n                return mousePos.top < this._borderSize;\n            default:\n                return false;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { NgGrid } from '../directives/NgGrid';\nimport { NgGridItem } from '../directives/NgGridItem';\nimport { NgGridPlaceholder } from '../components/NgGridPlaceholder';\n\n@NgModule({\n  declarations:     [ NgGrid, NgGridItem, NgGridPlaceholder ],\n  entryComponents:  [ NgGridPlaceholder ],\n  exports:          [ NgGrid, NgGridItem ]\n})\nexport class NgGridModule {}\n"]}